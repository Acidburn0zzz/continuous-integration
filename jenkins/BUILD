# Copyright 2015 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Configuration for our Jenkins instance
load("@bazel_tools//tools/build_defs/docker:docker.bzl", "docker_build")
load(":jenkins.bzl", "jenkins_node", "jenkins_build")

exports_files(["github-jobs.xml.tpl"])

#
# Common definitions
#
LINUX_PLATFORMS = [
    "linux-x86_64",
    "ubuntu_15.10-x86_64",
]

DARWIN_PLATFORMS = ["darwin-x86_64"]

UNIX_PLATFORMS = LINUX_PLATFORMS + DARWIN_PLATFORMS

#
# Nodes
#

# Physical machines
jenkins_node(
    name = "darwin-x86_64",
    labels = [
        "darwin-x86_64",
        "safe",
    ],
    remote_fs = "/Users/ci",
)

jenkins_node(
    name = "darwin-x86_64-2",
    labels = [
        "darwin-x86_64",
        "safe",
    ],
    num_executors = 3,
    preference = 4,
    remote_fs = "/Users/ci",
)

# GCE machines
jenkins_node(
    name = "windows-x86_64",
    labels = [
        "windows-x86_64",
        "safe",
    ],
    num_executors = 1,
    preference = 1,
    remote_fs = "c:\\jenkins",
)

[jenkins_node(
    name = "ubuntu_14.04-x86_64" + ext,
    labels = [
        "ubuntu_14.04-x86_64",
        "linux-x86_64",
        "safe",
    ],
) for ext in [
    "",
    "-2",
    "-3",
    "-4",
]]

# Non-release nodes
[jenkins_node(
    name = "ubuntu_15.10-x86_64" + ext,
    labels = [
        "ubuntu_15.10-x86_64",
        "no-release",
        "safe",
    ],
) for ext in [
    "",
    "-2",
    "-3",
    "-4",
]]

#
# A deploy slave used for release work and syncing
# our repositories.
#

# A little hack to remove path consideration
DEPLOY_FILES = [
    "hoedown",
    "github_release",
]

genrule(
    name = "deploy-files",
    srcs = ["@%s//file" % f for f in DEPLOY_FILES],
    outs = ["%s.tar.gz" % f for f in DEPLOY_FILES],
    cmd = "\n".join([
        "cp $(location @%s//file) $(location %s.tar.gz)" % (f, f)
        for f in DEPLOY_FILES
    ]),
)

docker_build(
    name = "deploy-base",
    base = "//base:ubuntu-wily-amd64-golang",
    directory = "/opt/data",
    env = {
        # We have to put those files on some secrets volume.
        "BOTO_CONFIG": "/opt/secrets/boto_config",
        "GITHUB_TOKEN_FILE": "/opt/secrets/github_token",
        "GSUTIL": "/opt/data/gsutil/gsutil",
        "GITHUB_RELEASE": "/opt/data/github-release/github-release",
        "HOEDOWN": "/opt/data/hoedown/hoedown",
    },
    files = [":deploy-files"],
    volumes = ["/opt/secrets"],
)

docker_build(
    name = "deploy-full",
    base = ":deploy-base",
    directory = "/opt/run",
    files = ["setup-deploy.sh"],
)

jenkins_node(
    name = "deploy",
    base = "deploy-full",
)

#
# Jenkins permissions
#

# Public permissions
PUBLIC_PERMS = [
    "Hudson.Read",  # Read the public dashboard
    "Item.Read",  # Read the result of a build
    "Item.Workspace",  # Read a job workspace
    "View.Read",  # Read views
    "Computer.Connect",  # Connect a new slave, needed by slaves
]

# Permissions for @google.com emails
AUTHENTICATED_PERMS = PUBLIC_PERMS + [
    # Special permissions
    "Item.Build",  # Launch a build
    "Item.Cancel",  # Cancel a build
]

# Permissions for admin users (Beware it is dangerous)
ADMIN_PERMS = AUTHENTICATED_PERMS + [
    "Run.Delete",  # Delete one build's information
    "Run.Update",  # Run one build's information
    "View.Configure",  # Configure views
    "View.Create",  # Create a new view
    "View.Delete",  # Delete existing view
    # Dangerous area: touch to slaves
    "Computer.Disconnect",  # Disconnect a slave, normally never needed
    "Computer.Configure",  # Configure a slave, normally never needed
    "Computer.Delete",  # Delete a slave, almost never needed
    "Computer.Build",  # Build on a slave, needed for debugging
    # Very dangerous area, administer jenkins
    "Hudson.Administer",  # Only used for restarting jenkins.
]

PERMS_TEMPLATE = "<permission>hudson.model.%s:%s</permission>"

#
# Creates the permissions info
#
# This is a config file generated by the build.sh script.
load(":config.bzl", "ADMIN_USERS")

JENKINS_PERMISSIONS = {
    "%{JENKINS_PERMISSIONS}": "\n".join([
        PERMS_TEMPLATE % (perm, "anonymous")
        for perm in PUBLIC_PERMS
    ] + [
        PERMS_TEMPLATE % (perm, "authenticated")
        for perm in AUTHENTICATED_PERMS
    ] + [
        PERMS_TEMPLATE % (perm, user)
        for user in ADMIN_USERS
        for perm in ADMIN_PERMS
    ]),
}

#
# Finally the Jenkins image
#
jenkins_build(
    name = "jenkins",
    configs = glob(["config/**"]) + [
        ":windows-x86_64",
        ":ubuntu_14.04-x86_64",
        ":ubuntu_15.10-x86_64",
        ":darwin-x86_64",
        ":ubuntu_14.04-x86_64-2",
        ":ubuntu_15.10-x86_64-2",
        ":darwin-x86_64-2",
        ":ubuntu_14.04-x86_64-3",
        ":ubuntu_15.10-x86_64-3",
        ":ubuntu_14.04-x86_64-4",
        ":ubuntu_15.10-x86_64-4",
        ":deploy",
    ],
    jobs = ["//jenkins/jobs"],
    substitutions = JENKINS_PERMISSIONS,
)
