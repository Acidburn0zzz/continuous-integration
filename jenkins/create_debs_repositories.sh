#!/bin/bash
#
# Copyright 2015 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Find all the debian dependencies of a series of debian package,
# using a docker instance as base image. Just run the script to see its
# usage.

: ${UBUNTU_MIRROR:=http://mirrors.kernel.org/ubuntu/}

function get_transitive_deps() {
  deps="$*"
  transitive_deps="$(apt-cache depends -i $deps | grep 'Depends: ' | cut -d ':' -f 2)"
  (echo "$deps"; echo "$transitive_deps") | tr ' ' '\n' | grep -v '^<' | sort -u
}

function list_dependencies() {
  deps="$*"
  transitive="$(get_transitive_deps $deps)"
  while [ "$transitive" != "$deps" ]; do
    deps="$transitive"
    transitive="$(get_transitive_deps $deps)"
  done

  echo $transitive
}

function get_package_info() {
  apt-cache show $2 | grep '^'$1':' | head -1 | cut -d ':' -f 2 | xargs
}

function generate_workspace_dep() {
  local package=$1
  local sha256=$(get_package_info 'SHA256' $package)
  local file=$(get_package_info 'Filename' $package)
  local url="${UBUNTU_MIRROR}${file}"
  echo "    [\"${package}\", \"${file}\", \"${sha256}\"],"
}

function generate_workspace() {
  local rule_name=$1
  shift 1
  echo "DEBS_${rule_name//-/_} = ["
  for i in "$@"; do
    generate_workspace_dep $i "deb-${rule_name}-"
  done
  cat <<EOF
]

[http_file(
    name = "deb-${rule_name}-%s" % deb[0],
    url = "${UBUNTU_MIRROR}%s" % deb[1],
    sha256 = deb[2],
) for deb in DEBS_${rule_name//-/_}]
EOF
}

function generate_build_rule() {
  local rule_name=$1
  echo "docker_build("
  echo "    name = \"${rule_name}\","
  shift 1
  echo "    base = \"$1\","
  shift 1
  echo "    debs = ["
  for i in "$@"; do
    echo "        \"@deb-${rule_name}-$i//file\","
  done
  echo "    ],"
  echo ")"
}

if (( $# < 3 )); then
  echo "Usage: $0 [docker:image] rule_name base_image package1...packageN" >&2
  echo "If docker:image is specified then image is interpreted as the name of" >&2
  echo "a docker image to run this script within. If it is not specified, then" >&2
  echo "this script runs the debian package search on this machine it is invoked." >&2
  exit 1
fi

if [[ "$1" =~ ^docker:(.*)$ ]]; then
  # Run inside docker
  shift 1
  docker run "${BASH_REMATCH[1]}" /bin/bash -c "$(cat ${BASH_SOURCE[0]})" "$0" "$@"
  exit $?
fi

apt-get update &>/dev/null

rule_name=$1
base_image=$2
shift 2
deps=$(list_dependencies "$*")
echo "# Generated by $0 $rule_name $base_image $*"
echo "# Dependencies: $deps"
echo "### WORKSPACE ###"
generate_workspace $rule_name $deps
echo "### BUILD ###"
generate_build_rule $rule_name $base_image $deps
